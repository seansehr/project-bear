<?php
/**
 * @file
 * Code for the Shopify Enhancements feature.
 */

include_once 'shopify_enhancements.features.inc';

/**
 * @file
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function shopify_enhancements_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_menu().
 */
function shopify_enhancements_menu() {
  $items['product-search/%'] = array(
    'page callback' => 'shopify_enhancements_search',
    'page arguments' => array(1),
    'title' => 'Search Products',
    'access callback' => TRUE,
  );
  $items['admin/shopify/enhancements'] = array(
    'title' => 'Other Settings',
    'description' => 'Settings provided by Shopify Enhancements.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('shopify_enhancements_admin_form'),
    'access callback' => 'shopify_user_access',
    'access arguments' => array('administer shopify'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/shopify_enhancements.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_library().
 */
function shopify_enhancements_library() {
  $module_path = drupal_get_path('module', 'shopify_enhancements');
  $libraries['shopify_enhancements'] = array(
    'title' => 'Settings',
    'version' => '1.0',
    'js' => array(
      libraries_get_path('accountingjs') . '/accounting.min.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      libraries_get_path('money_js') . '/money.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      libraries_get_path('shopify_buy') . '/shopify-buy.polyfilled.globals.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      $module_path . '/js/app/bundle.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      $module_path . '/js/shopify_enhancements.stores.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      $module_path . '/js/shopify_enhancements.currency.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      $module_path . '/js/shopify_enhancements.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      $module_path . '/js/shopify_enhancements.cart.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
      array(
        'type' => 'setting',
        'data' => array(
          'shopify_enhancements' => array(
            'domain' => str_replace('.myshopify.com', '', shopify_store_info()->myshopify_domain),
            'apiKey' => '56fdbbc3dc59ed0919f4338740a2cca2',
          ),
        ),
      ),
    ),
  );

  $libraries['shopify_enhancements_cart'] = array(
    'title' => 'Gigya Accounts',
    'version' => '1.0',
    'js' => array(
      'https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js' => array(
        'external' => true,
      ),
      $module_path . '/js/app/bundle.js' => array(
        'defer' => 'true',
        'scope' => 'footer',
      ),
    ),
    'dependencies' => array(
      array('shopify_enhancements', 'shopify_enhancements'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_libraries_info().
 *
 * For defining external libraries.
 */
function shopify_metafield_libraries_info() {
  $libraries['parsedown'] = array(
    'name' => 'Parsedown',
    'vendor url' => 'http://erusev.com',
    'download url' => 'http://parsedown.org',
    'version arguments' => array(
      'file' => 'parsedown.php',
      // const version = 1.6.0
      'pattern' => '/(\d+\.+\d+\.+\d+)/',
      'lines' => 25,
    ),
    'files' => array(
      'php' => array('parsedown.php'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_theme().
 */
function shopify_enhancements_theme($existing, $type, $theme, $path) {
  return array(
    'cart' => array(
      'variables' => array(
        'cart' => NULL,
        'domain' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'cart',
    ),
    'currency' => array(
      'variables' => array(
        'currencies' => array(),
      ),
      'path' => $path . '/templates',
      'template' => 'currency',
    ),
    'other_products' => array(
      'variables' => array(
        'related' => NULL,
        'recent' => NULL,
        'preorder' => NULL,
      ),
      'path' => $path . '/templates',
      'template' => 'other-products',
    ),
    'image_modal' => array(
      'variables' => array(
        'files' => array(),
      ),
      'path' => $path . '/templates',
      'template' => 'image-modal',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function shopify_enhancements_block_info() {
  $blocks['currency'] = array(
    'info' => t('Shopify Currency'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['product_search'] = array(
    'info' => t('Product Search'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['related_products'] = array(
    'info' => t('Shopify Related Products'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function shopify_enhancements_block_view($delta = '') {
  $block = array();
  $module_path = drupal_get_path('module', 'shopify_enhancements');
  switch ($delta) {
    case 'currency':
      $block['content'] = shopify_enhancements_currency_block();
      break;
    case 'product_search':
      $form = drupal_get_form('shopify_enhancements_product_search_form');
      $form['#attached']['js'][] = $module_path . '/js/shopify_enhancements.search.js';
      $block['content'] = $form;
      break;
    case 'related_products':
      if ($product = menu_get_object('shopify_product')) {
        $block['content'] = shopify_enhancements_related_products_block($product);
      }
      break;
  }
  return $block;
}

/**
 * View for the currency change block.
 *
 * @return Array
 *   A render array for the block.
 */
function shopify_enhancements_currency_block() {
  $currencies = array(
    'USD' => '$',
    'CAD' => '<i class="icon icon-leaf" aria-hidden="true"></i>',
    'GBP' => '£',
    'EUR' => '€',
    'JPY' => '¥',
    'INR' => '₹',
    'TRY' => '₺',
  );
  return array(
    '#theme' => 'currency',
    '#currencies' => $currencies,
    '#attached' => array(
      'library' => array(
        array('shopify_enhancements', 'shopify_enhancements_cart'),
      ),
      'js' => array(
        array(
          'type' => 'setting',
          'data' => array(
            'shopify_enhancements' => array(
              'currencies' => $currencies,
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * View for the related products block.
 *
 * @return Array
 *   A render array for the block.
 */
function shopify_enhancements_related_products_block($product) {
  $related = views_embed_view('related_products', 'default', $product->id, $product->id, $product->id);
  $recent = views_embed_view('recently_viewed_products', 'default', $product->id);
  $preorder = views_embed_view('preorder_products');
  return theme('other_products', array(
    'related' => $related,
    'recent' => $recent,
    'preorder' => $preorder,
  ));
}

/**
 * Form for searching products.
 */
function shopify_enhancements_product_search_form($form, &$form_state) {
  // Use markup to avoid default button styling.
  $form['search'] = array(
    '#markup' => '<span class="button--search" id="search-button"><i class="fa fa-search"></i><span class="show-for-sr">' . t('Search') . '</span></span>',
  );

  $form['term'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#maxlength' => 128,
  );

  // Needs a submit button to work.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#attributes' => array(
      'class' => array('hide'),
    )
  );

  return $form;
}

function shopify_enhancements_product_search_form_submit($form, &$form_state) {
  // Destination overrides the redirect.
  unset($_GET['destination']);
  $form_state['redirect'] = 'product-search/' . check_plain($form_state['values']['term']);
}

/**
 * Implements hook_block_view_alter().
 */
function shopify_enhancements_block_view_alter(&$data, $block) {
  if ($block->module == 'shopify' && $block->delta == 'cart') {
    $domain = shopify_store_info()->myshopify_domain;
    $cart_string = t('Cart');
    $cart = "<i class='fa fa-shopping-cart'></i> <span id='shopify-cart-text'>$cart_string<span> (<span id='shopify-cart-total'></span>)";
    $data['content'] = array(
      '#theme' => 'cart',
      '#cart' => $cart_string,
      '#domain' => $domain,
      '#attached' => array(
        'library' => array(
          array('shopify_enhancements', 'shopify_enhancements_cart'),
        ),
      ),
    );
  }
}

function shopify_enhancements_entity_view_alter(&$build, $type) {
  if ($type == 'shopify_product') {
    drupal_add_js(array('shopify_enhancements' => array('productID' => $build['#entity']->product_id)), 'setting');
    $entity = entity_metadata_wrapper('shopify_product', $build['#entity']);
    $tags = $entity->shopify_product_tags->value();
    $filtered_tags = array();
    foreach ($tags as $tag) {
      if (isset($tag->field_status_marker) && $tag->field_status_marker[LANGUAGE_NONE][0]['value']) {
        $color = !empty($tag->field_color[LANGUAGE_NONE][0]) ? '#' . $tag->field_color[LANGUAGE_NONE][0]['jquery_colorpicker'] : 'inherit';
        $filtered_tags[] = "<span style='color:$color;'>$tag->name</span>";
      }
    }
    $build['shopify_product_tags'] = array(
      '#markup' => implode(', ', $filtered_tags),
    );
  }
}

/**
 * Implements hook_shopify_product_update_alter().
 */
function shopify_enhancements_shopify_product_update_alter(&$shopify_product) {
  $metafields = array('category', 'licence');
  $ids = array_map(function ($e) {
    return $e['target_id'];
  }, $shopify_product->shopify_product_metafields[LANGUAGE_NONE]);

  if (!empty($ids)) {
    $entities = entity_load('shopify_metafield', $ids);
    foreach ($entities as $entity) {
      if ($entity->namespace == 'attr' || $entity->namespace == 'c_f') {
        $key = $entity->key;
        if (in_array($key, $metafields)) {
          $shopify_product->$key = $entity->value;
        }
      }
    }
  }

  shopify_enhancements_associate($shopify_product, 'shopify_brands', 'vendor', 'field_shopify_brand_reference');
  shopify_enhancements_associate($shopify_product, 'shopify_categories', 'category', 'field_shopify_category_reference');
  shopify_enhancements_associate($shopify_product, 'shopify_licences', 'licence', 'field_shopify_licence_reference');
}

function shopify_enhancements_associate(&$shopify_product, $tax_name, $shopify_name, $field_name) {
  if ($shopify_product->$shopify_name) {
    $taxonomies = taxonomy_get_term_by_name($shopify_product->$shopify_name, $tax_name);
    $product_wrapper = entity_metadata_wrapper('shopify_product', $shopify_product);
    if (empty($taxonomies)) {
      $tax = new stdClass();
      $tax->name = $shopify_product->$shopify_name;
      $tax->vid = taxonomy_vocabulary_machine_name_load($tax_name)->vid;
      taxonomy_term_save($tax);
    }
    else {
      $tax = array_shift($taxonomies);
    }
    $product_wrapper->$field_name->set($tax);
    $product_wrapper->save();
  }
}

/**
 * Alter the outgoing response.
 *
 * related support issue https://drupal.org/node/2024603
 *
 * @param mixed $response
 *   The response data being returned by the REST service (not yet serialized).
 *
 * @param string $function
 *   The function being called on the REST service.
 *
 * @param string $format
 *   The name of the format serializing the response.
 */
function shopify_enhancements_restws_response_alter(&$response, $function, $formatName) {
  // specific modifications based common request type
  if ($formatName == 'json') {
    if ($function == 'viewResource') {
      shopify_enhancements_restsw_process_entity($response);
    }
    if ($function == 'queryResource') {
      if (is_array($response['list'])) {
        foreach ($response['list'] as &$entity) {
          shopify_enhancements_restsw_process_entity($entity);
        }
      }
    }
  }
}

function shopify_enhancements_restsw_process_entity(&$entity) {
  // allow for deep loading of resources
  foreach ($entity as $key => &$val) {
    // check for a single resource verses many
    if (is_array($val)) {
      if (isset($val[0])) {
        // loop through items loading them in
        foreach ($val as &$item) {
          shopify_enhancements_attach_field_reference($item);
        }
      }
      elseif (isset($val['id'])) {
        shopify_enhancements_attach_field_reference($val);
      }
    }
  }

  if (isset($entity['variant_id']) && $entity['variant_id'] == 0) {
    $product = shopify_product_load_single($entity['product_id']);
    $alias = drupal_get_path_alias(entity_uri('shopify_product', $product));
    $entity['url'] = $alias['path'];
    foreach ($product->variants as $variant) {
      if (entity_access('view', 'shopify_product', $variant)) {
        // create a meta wrapper to act on for entity
        $wrapper = entity_metadata_wrapper('shopify_product', $variant);
        // filter out these values
        $wrap = restws_property_access_filter($wrapper);
        $eary = (array) $variant;
        foreach ($eary as $property => $value) {
          // value needs to be removed as it didn't pass wrapper validation
          if (!isset($wrap[$property])) {
            unset($eary[$property]);
          }
        }
        // add values based on wrapper passing correctly
        $entity['variants'][] = $eary;
      }
    }
  }
}

function shopify_enhancements_attach_field_reference(&$field) {
  if (isset($field['file'])) {
    $field = $field['file'];
  }
  elseif (empty($field['id'])) {
    return FALSE;
  }
  $entity = entity_load_single($field['resource'], $field['id']);
  // ensure they can view this specific item
  if (entity_access('view', $field['resource'], $entity)) {
    // create a meta wrapper to act on for entity
    $wrapper = entity_metadata_wrapper($field['resource'], $entity);
    // filter out these values
    $wrap = restws_property_access_filter($wrapper);
    $eary = (array) $entity;
    foreach ($eary as $property => $value) {
      // value needs to be removed as it didn't pass wrapper validation
      if (!isset($wrap[$property])) {
        unset($eary[$property]);
      }
    }
    if ($field['resource'] == 'file') {
      $query = drupal_get_query_parameters();
      $image_style = isset($query['image_style']) ? $query['image_style'] : 'medium';
      $eary['url'] = theme('image', array(
        'path' => $entity->uri,
        'height' => $entity->height,
        'width' => $entity->width,
        'alt' => $wrapper->field_file_image_alt_text->value(),
        'title' => $wrapper->field_file_image_title_text->value(),
      ));
    }
    // add values based on wrapper passing correctly
    $field[$field['resource']] = $eary;
  }
}

/**
 * Implements hook_shopify_metafield_update_alter().
 *
 * Converting fields from markdown to html before they are saved.
 */
function shopify_enhancements_shopify_metafield_update_alter(&$metafield) {
  $markdown_fields = array('dimensions', 'specs');
  if (in_array($metafield->key, $markdown_fields)) {
    if (($library = libraries_load('parsedown')) && !empty($library['loaded'])) {
      $Parsedown = new Parsedown();
      $metafield->value = check_markup($Parsedown->text($metafield->value), 'full_html');
    }
  }
}

function shopify_enhancements_search($term) {
  $index = search_api_index_load("products");
  $query = new SearchApiQuery($index);
  $query->keys(check_plain($term));
  $data = $query->execute();
  $results = $data["results"];
  $settings = array(
    "source" => "custom",
    "ids" => array_keys($results),
  );
  include(drupal_get_path("module", "ctools") . "/includes/content.inc");
  $widget = ctools_content_render("shopify_enhancements", "shopify_enhancements", $settings);
  return $widget->content;
}

function shopify_enhancements_preprocess_image_modal(&$variables) {
  $variables['images'] = array();
  $variables['thumbnails'] = array();
  foreach ($variables['files'] as $key => $value) {
    $image_id = "modal-image-$key";
    $variables['images'][$key] = array(
      '#theme' => 'image',
      '#path' => $value['uri'],
      '#alt' => $value['alt'],
      '#title' => $value['title'],
      '#height' => $value['height'],
      '#width' => $value['width'],
      '#attributes' => array(
        'id' =>  $image_id,
      ),
    );

    $thumbnail_image = array(
      '#theme' => 'image_style',
      '#style_name' => 'shopify_product_thumbnail',
      '#path' => $value['uri'],
      '#alt' => $value['alt'],
      '#title' => $value['title'],
      '#height' => $value['height'],
      '#width' => $value['width'],
      '#attributes' => array(
        'class' => array('image-modal__image'),
      ),
    );
    $variables['thumbnails'][$key] = array(
      '#theme' => 'link',
      '#path' => current_path(),
      '#options' => array(
        'attributes' => array(
          'class' => array('js-thumbnail-skip image-modal__thumbnail'),
        ),
        'html' => TRUE,
        'fragment' => "modal-image-$key",
       ),
      '#text' => drupal_render($thumbnail_image),
    );
  }
}

/**
 * Get an array of categories to use in the product list.
 *
 * @param string $category
 *   The response data being returned by the REST service (not yet serialized).
 *
 * @return array
 */
function _shopify_enhancements_categories_map($category) {
  switch ($category) {
    case 'shopify_brands':
      $fields = array(
        'size',
        'licence',
        'category',
      );
      break;
    case 'shopify_categories':
      $fields = array(
        'size',
        'vendor',
        'licence',
      );
      break;
    case 'shopify_licences':
      $fields = array(
        'size',
        'vendor',
        'category',
      );
      break;
    case 'size':
      $fields = array(
        'vendor',
        'licence',
        'category',
      );
      break;
    default:
      $fields = array(
        'size',
        'vendor',
        'licence',
        'category',
      );
      break;
  }
  $map = array();
  foreach ($fields as $field) {
    $map[$field] = _shopify_enhancements_categories_map_field($field);
  }
  return $map;
}

/**
 * Get settigns for a specific field.
 *
 * @param string $field_name
 *   The field to get information for.
 *
 * @return array
 */
function _shopify_enhancements_categories_map_field($field_name) {
  switch ($field_name) {
    case 'category':
      $field = array(
        'name' => t('Type'),
        'metafieldNamespace' => 'c_f',
      );
      break;
    case 'licence':
      $field = array(
        'name' => t('Licenses'),
        'metafieldNamespace' => 'c_f',
      );
      break;
    case 'size':
      $field = array(
        'name' => t('Scale'),
        'metafieldNamespace' => 'c_f',
      );
      break;
    case 'vendor':
      $field = array(
        'name' => t('Brand'),
      );
      break;
    default:
      $field = array();
  }
  return $field;
}
